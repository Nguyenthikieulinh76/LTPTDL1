{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNi9yjGckAhi+weXKHPS8PO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nguyenthikieulinh76/LTPTDL1/blob/main/bai1.Lot%20Area\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "iuodIw8GvGwl",
        "outputId": "8006f5de-b2dc-4668-a4b3-31eaff0f1e4b"
      },
      "source": [
        "import seaborn as sns\r\n",
        "from google.colab import files\r\n",
        "uploaded=files.upload()"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ee587a01-13d2-4457-9d72-7d7cd5cab370\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ee587a01-13d2-4457-9d72-7d7cd5cab370\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving AmesHousing.xls to AmesHousing.xls\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MBWKJBYNeCxU",
        "outputId": "7bffc67c-8f6e-4eb0-ac09-1ad3a7fc15f2"
      },
      "source": [
        "import pandas as pd\r\n",
        "import io\r\n",
        "Housing= pd.read_excel(io.BytesIO(uploaded[\"AmesHousing.xls\"]) )\r\n",
        "print(Housing)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      Order        PID  MS SubClass  ... Sale Type  Sale Condition  SalePrice\n",
            "0         1  526301100           20  ...       WD           Normal     215000\n",
            "1         2  526350040           20  ...       WD           Normal     105000\n",
            "2         3  526351010           20  ...       WD           Normal     172000\n",
            "3         4  526353030           20  ...       WD           Normal     244000\n",
            "4         5  527105010           60  ...       WD           Normal     189900\n",
            "...     ...        ...          ...  ...       ...             ...        ...\n",
            "2925   2926  923275080           80  ...       WD           Normal     142500\n",
            "2926   2927  923276100           20  ...       WD           Normal     131000\n",
            "2927   2928  923400125           85  ...       WD           Normal     132000\n",
            "2928   2929  924100070           20  ...       WD           Normal     170000\n",
            "2929   2930  924151050           60  ...       WD           Normal     188000\n",
            "\n",
            "[2930 rows x 82 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ghy6drBbhKf",
        "outputId": "d0f518f6-7f76-4027-88a8-5816fae786dc"
      },
      "source": [
        "import pandas as pd\r\n",
        "Housing= pd.read_excel(io.BytesIO(uploaded[\"AmesHousing.xls\"]) )\r\n",
        "a= pd.DataFrame(Housing, columns=['Lot Area'])\r\n",
        "print(a)\r\n"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      Lot Area\n",
            "0        31770\n",
            "1        11622\n",
            "2        14267\n",
            "3        11160\n",
            "4        13830\n",
            "...        ...\n",
            "2925      7937\n",
            "2926      8885\n",
            "2927     10441\n",
            "2928     10010\n",
            "2929      9627\n",
            "\n",
            "[2930 rows x 1 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ksiRILGuqNBz"
      },
      "source": [
        ""
      ],
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wAhb2EYpJ_VC"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "2qJN969TDcp1",
        "outputId": "e2841c9f-ba09-413f-fad5-26cd89d31a9e"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "plt.title('bieu do histogram')\r\n",
        "Housing['Lot Area'].hist(bins=20)\r\n",
        "plt.show()"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "0VkTxmPDWoPr",
        "outputId": "b820f088-92dc-4726-eff5-4d00f6c349b0"
      },
      "source": [
        "from numpy.random import seed\r\n",
        "from numpy.random import randn\r\n",
        "from matplotlib import pyplot as plt\r\n",
        "from statsmodels.graphics.gofplots import qqplot\r\n",
        "import statsmodels.graphics.gofplots as stm\r\n",
        "qqplot(Housing['Lot Area'], line='s')\r\n",
        "plt.title('Lot Area')\r\n",
        "plt.show()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "xTpLCFC6ELD3",
        "outputId": "bc466440-888d-439f-cc96-d62231ff83f0"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "plt.title('bieu do boxplot')\r\n",
        "Housing.boxplot(column=['Lot Area'])\r\n",
        "plt.show()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zuqLti8EXh9U"
      },
      "source": [
        ""
      ],
      "execution_count": 36,
      "outputs": []
    }
  ]
}